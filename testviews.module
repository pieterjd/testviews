<?php

function testviews_views_api(){
  return array(
    'api' => 3,
  );
}
 
 /**
 * Implement hook_date_api_tables().
 */ 
 function testviews_date_api_tables(){
  return array('testviews');
 }
 
function testviews_menu(){
  $menu = array();
  $menu['lookup'] = array(
    'title' => 'Lookup Form',
    'description' => 'Looking thing up and rendering them',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testviews_lookup_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    
  );
  $menu['save/%/%'] = array(
    'title' => 'Save it',
    'type' => MENU_CALLBACK,
    'page callback' => 'testviews_save_db',
    'page arguments' => array(1,2),
    'access callback' => TRUE,
  );
  $menu['testbol'] = array(
    'title' => 'Test bol',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'testviews_testbol',
    //'page arguments' => array('GET','/openapi/services/rest/catalog/v3/searchresults','?term=potter&offset=0&nrProducts=8&includeProducts=true&includeCategories=true&includeRefinements=false&categoryId=0','',''),
    'access callback' => TRUE,
  );
  $menu['testpager'] = array(
    'title' => 'Test Pager',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'testviews_testpager',
    //'page arguments' => array('GET','/openapi/services/rest/catalog/v3/searchresults','?term=potter&offset=0&nrProducts=8&includeProducts=true&includeCategories=true&includeRefinements=false&categoryId=0','',''),
    'access callback' => TRUE,
  );
  $menu['dateform'] = array(
    'title' => 'Form with date element',
    'description' => 'Date Form',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testviews_dateform'),
    'access callback' => TRUE,
  );
  $menu['returnform'] = array(
    'title' => 'Return Form',
    'description' => 'Return Form',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('testviews_returnform'),
    'access callback' => TRUE,
  );
  //autocomplete for node titles
  $menu['node/autocomplete'] = array(
      'title' => 'Autocomplete for node title',
      'page callback' => 'testviews_node_autocomplete',
      'access callback' => TRUE,  //or whatever permission makes sense
      'type' => MENU_CALLBACK,
  );
  return $menu;
}


/**
* based on https://drupal.org/node/854216
*/
function testviews_node_autocomplete($titles_typed =''){
  /*
  $matches = array();
  $result = db_select('node', 'n')
    ->fields('n', array('title','nid'))
    ->condition('title', '%' . db_like($string) . '%', 'LIKE')
    ->execute(); 
  // save the query to matches
  foreach ($result as $row) {
    $key = check_plain($row->title) . ' ('. .')'
    $matches[$row->nid] = check_plain($row->title);
  }
  // Return the result to the form in json
  drupal_json_output($matches);
  */
  //ripped from taxonomy.module :)
  // If the request has a '/' in the search text, then the menu system will have
  // split it into multiple arguments, recover the intended $tags_typed.
  $args = func_get_args();
  // Shift off the $field_name argument.
  array_shift($args);
  $tags_typed = implode('/', $args);

 

  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $titles_typed = drupal_explode_tags($titles_typed);
  $title_last = drupal_strtolower(array_pop($titles_typed));

  $matches = array();
  if ($title_last != '') {

    $query = db_select('node', 'n');
    //tags not necessary
    /*
    $query->addTag('translatable');
    $query->addTag('term_access');
    */
    // Do not select already entered terms.
    if (!empty($titles_typed)) {
      $query->condition('n.title', $titles_typed, 'NOT IN');
    }
    // Select rows that match by term name.
    $titles_return = $query->fields('n', array('nid', 'title'))
      ->condition('n.title', '%' . db_like($title_last) . '%', 'LIKE')
      ->range(0, 10)
      ->execute()
      ->fetchAllKeyed();

    $prefix = count($titles_typed) ? drupal_implode_tags($titles_typed) . ', ' : '';

    foreach ($titles_return as $nid => $title) {
      $t = $title;
      // Term names containing commas or quotes must be wrapped in quotes.
      if (strpos($title, ',') !== FALSE || strpos($title, '"') !== FALSE) {
        $t = '"' . str_replace('"', '""', $title) . '"';
      }
      $matches[$prefix . $t] = check_plain($title);
    }
  }

  drupal_json_output($matches);
}

function testviews_dateform($form,&$form_state){
  $form['start_date'] = array(
    '#type' => 'date_popup',
    '#title' => t('Start of lending'),
    '#default_value' => date('Y-m-d H:i'),
    '#required' => TRUE,
    
  );
  $form['end_date'] = array(
    '#type' => 'date_popup',
    '#title' => t('end of lending'),
    '#default_value' => date('Y-m-d H:i',strtotime('+1 week')),
    '#required' => TRUE,
    
  );
  $form['user'] = array(
    '#type' => 'textfield',
    '#title' => t('Person who is lending.'),
    '#required' => TRUE,
    //autocomplete for user
    '#autocomplete_path' => 'user/autocomplete',
  );
  $form['node'] = array(
    '#type' => 'textfield',
    '#title' => t('Item to lent.'),
    '#required' => TRUE,
    //autocomplete for node title
    '#autocomplete_path' => 'node/autocomplete',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Lend it!'),
  );
  
  
  return $form;
}

function testviews_dateform_validate($form, &$form_state) {
  if(strtotime($form_state['values']['start_date']) > strtotime($form_state['values']['end_date'])){
    form_set_error('end_date',t('Must be later than start date.'));
  }
}

function testviews_dateform_submit($form, &$form_state) {
  //dsm($form_state['values']);
  //get entered titles
  $titles = explode(',',$form_state['values']['node']);
  //dsm($titles);
  //iterate over the titles
  foreach($titles as $title){
    //retrieve node id
    //should use entityquery but only need nid, not the attached fields
    $nid = db_select('node', 'n')
      ->condition('n.title', trim($title))
      ->fields('n', array('nid'))
      ->execute()
      ->fetchField();
    //dsm("found $nid");
    db_insert('testviews')
    ->fields(array(
      'loan_time' => strtotime($form_state['values']['start_date']),
      'expected_return' => strtotime($form_state['values']['end_date']),
      'nid' => $nid,
      'uid' => user_load_by_name($form_state['values']['user'])->uid,
    ))
    ->execute();
  }
  drupal_set_message("Saved.");
}

function testviews_returnform($form,&$form_state){
  $form['node'] = array(
    '#type' => 'textfield',
    '#title' => t('Item to return.'),
    '#required' => TRUE,
    //autocomplete for node title
    '#autocomplete_path' => 'node/autocomplete',
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Return it!'),
  );
  
  
  return $form;
}

function testviews_returnform_submit($form, &$form_state) {
  //dsm($form_state['values']);
  db_update('testviews')
    ->fields(array(
      'observed_return' => time(),
      
    ))
    ->condition('observed_return', NULL)
    ->condition('nid',$form_state['values']['node'])
    ->execute();
    drupal_set_message("Saved.");
}
function testviews_testpager(){
  $total = 100;
  $limit = 6;
  
  $current_page = pager_find_page();
  pager_default_initialize($total, $limit, $element = 0);
  $output = "current page is $current_page";
  $start_index = $current_page*6;
  $rows = array();
  for($i = $start_index;$i < min($start_index + $limit,$total); $i++){
    $rows[] = "$i  ";
  }
  $output .= theme('item_list',
    array(
      'items' => $rows,
      'title' => 'Listing',
    )
  );
  $output.= theme('pager');
  return $output;

}
function testviews_testbol(){
  //initialize the pager
  // returns current page of pager; first page is 0
  $current_page = pager_find_page();
  $hits = bol_search("Harry Potter",$offset = 10*$current_page);
  //dsm($hits);
  //dsm($hits['results']);
  
  $items = array();
  foreach($hits['results'] as $hit){
    $items[] = theme('bol_item',array('item' => $hit));
  }
  $output['hits'] = array(
    '#markup' => format_plural($hits['total_result_size'],'1 hit','@count hits'),
  );
  $output['top_pager'] = array(
    '#theme' => 'pager',
  );
  
  //currently limit is hardcoded value is 10
  $limit =10;
  pager_default_initialize($hits['total_result_size'], $limit, $element = 0);
  $output['results'] = array(
    '#theme' => 'item_list',
    '#items' => $items,
    '#type' => 'ul',
    '#title' => 'Search Results',
  );
  
  $output['bottom_pager'] = array(
    '#theme' => 'pager',
  );
  //$output.= theme('pager');
  return $output;
}
/**
My own search form
*/
function testviews_lookup_form($form,&$form_state){
  $form['keyword_textfield'] = array(
    '#type' => 'textfield',
    '#title' => t('Keyword(s)'),
    '#description' => t('Enter the keywords you want to look for'),
    '#ajax' => array(
      'wrapper' => 'div_results',
      'callback' => 'testviews_lookup_callback',
    ),
  );
  /*
  $form['store_choice'] = array(
      '#type' => 'radios',
      '#title' => t('Store'),
      '#description' => t('Select the store to search for the keywords.'),
      '#options' => drupal_map_assoc(array('amazon','bol.com')),
  );
  */
  $form['result'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="div_results">',
    '#suffix' => '</div>',
  );
  
  return $form;
}
//ajax callback function
function testviews_lookup_callback($form,&$form_state){
  $result_element  = $form['result'];
  //dsm($form_state['store_choice']);
  $result_element['#markup'] = 'Helaba<b>'.$form_state['values']['keyword_textfield'].'vvv</b>';
  return $result_element;
}
/**
Looks up id using service and saves it in db
example service: amazon
example id: asin
*/
function testviews_save_db($service,$id){
  if($service == "amazon"){
    $item = amazon_item_lookup($id);
    dsm($item);
    amazon_item_insert($item);
  }
}
/**
Trying to do the same, but with built-in search system
*/
function testviews_search_info(){
  $info = array();
  $info['title'] = t('Testviews Search');
  return $info;
}

function testviews_search_execute($keys = NULL, $conditions = NULL){
  //relay search to amazon
  $amazon_items = amazon_search_simple_search($keys);
  $hits = array();
  foreach($amazon_items as $item){
    //dsm($item);
    //$user_comments = drupal_http_request($item['customerreviews_iframe']);
    $hits[] = array(
      'link' =>   $item['detailpageurl'],
      'title' => 'Amazon '.$item['title'],
      //'snippet' => $user_comments->data,
      //'snippet' => $item['publicationyear'],
      'snippet' => theme('amazon_item', 
        array(
          'item' => $item,
        )
      ),
    );
  }
   //relay search to bol
  $bol_items = bol_search($keys);
  $hits = array();
  foreach($bol_items as $item){
    //dsm($item);
    //$user_comments = drupal_http_request($item['customerreviews_iframe']);
    dsm($item->{"Title"});
    $hits[] = array(
      'link' => $item->{"Urls"}->{"Main"},
      'title' => $item->{"Title"},
      //'snippet' => $user_comments->data,
      //'snippet' => $item['publicationyear'],
      'snippet' => theme('bol_item', 
        array(
          'item' => $item,
        )
      ),
      'extra' => array(
        'save' => l('save this','save/amazon/'.$item['asin']),
      ),
    );
  }
  return $hits;

}